---
layout: post
title: "Ruby on Rails Plugin: data_migration"
categories:
- Ruby
- Ruby on Rails
---

data_migration allows you to separate data you need to load from your normal database migrations in a minimal way. While developing the new version of our flagship site, <a href="http://www.knetwit.com">Knetwit</a>, we decided we needed to separate our data migrations (initial settings and the like) from our structural migrations. We decided the easiest way to do this was to modify the existing Rails migration to allow for a new data migration. So we did.
<!-- -**-END-**- -->
Install Plugin

{% highlight ruby %} 
  script/plugin install git://github.com/handerson/data_migration.git
{% endhighlight %}

Generate Migration

{% highlight ruby %} 
  script/generate data_migration BlockedDomains 
{% endhighlight %}

{%highlight ruby %}
  exists  db/data
  create  db/data/20090915161242_settings.rb[/sourcecode]
{% endhighlight %}

db/data/20090915161242_settings.rb:

{% highlight ruby %} 
  class BlockedDomains &lt; ActiveRecord::Migration
    def self.up
    end
  end
{% endhighlight %}

Add your data:

{% highlight ruby %} 
  def self.up
    BlockedEmailDomain.create(:domain => "mailinator.com")
    BlockedEmailDomain.create(:domain => "spamherelots.com")
    BlockedEmailDomain.create(:domain => "disposeamail.com")
  end
{% endhighlight %}

Run Migration

{% highlight ruby %}
  rake db:data:migrate
{% endhighlight %}

{% highlight ruby %} 
  ==  BlockedDomains: migrating ===========================================================
  ==  BlockedDomains: migrated (0.0020s) ==================================================
{% endhighlight %}

db:data:migrate adds the data migration version number to the 'schema_migrations' table so it will not be ran again.

Code at Github:
<a href="http://github.com/handerson/data_migration">http://github.com/handerson/data_migration</a>